@model CommunityConnections.ViewModels.AdsListingViewModel
@{
    ViewBag.Title = "Index";
    WebGrid grid = new WebGrid(Model.Ads, rowsPerPage: 20);
}
<style>
</style>
<div class="card">
    <div class="card-body">
        <h2>Ads</h2>
        <p>For File Edit Copy File Name with Extension and add before >> Content/paths/</p>
        <hr />
    </div>
</div>
<div class="row col-md-12">
    <form id="actionForm">
        <div class="card col-md-6" style="float:left;margin-right:20px;">

            @{
                Html.RenderPartial("ActionPartial", Model);
            }

            </div>

            <div class="card col-md-5">
                <div class="card-body">

                    @{
                        Html.RenderPartial("MainScreenPartial", Model);
                    }
                    @if (Model.ID != 0)
                    {
                        <button id="actionButton" type="button" class="btn btn-outline-primary"><i class="fas fa-save mr-1"></i> UPDATE</button>
                    }
                    else
                    {
                        <button id="actionButton" type="button" class="btn btn-outline-primary "><i class="fas fa-save mr-1"></i> SAVE</button>
                    }
                    <a href="@Url.Action("Index","Ads")" class="btn btn-outline-danger"> CANCEL</a>
                    <button type="button" disabled class="btn btn-danger"> Classified Ads</button>
                </div>
            </div>
</form>

</div>
<div class="row">
    <div class="card col-md-12">
        <div class="card-body">
            <form>
                <div class="input-group">
                    <input type="text" name="searchterm" class="form-control" placeholder="Search." value="@Model.SearchTerm">
                    @Html.ValidationSummary("", new { @class = "text-danger" })



                    <div class="input-group-append">
                        <button class="btn btn-outline-primary" type="submit"><i class="mdi mdi-account-search"></i> Search</button>
                        <a class="btn btn-outline-success" href="@Url.Action("Action", "Ads")"><i class="mdi mdi-account-plus"></i>Add New</a>
                        <a class="btn btn-outline-success" href="@Url.Action("Import", "Ads")"><i class="mdi mdi-account-plus"></i>Import</a>

                    </div>
                </div>

            </form>
            <hr />
            <h2 class="card-title">All Ads</h2>
            <div class="col-md-12">
                <div class="col col-lg-12">


                    @grid.GetHtml(
                            tableStyle: "table table-responsive table-striped table-bordered",
                            columns: grid.Columns(

grid.Column(header: "ID", format:@<text><div class="edit" data-id="@item.ID" data-propertyname="ID">@item.ID</div></text>),
grid.Column(header: "Name", format:@<text><div data-id="@item.ID" data-propertyname="Name">@item.Name</div></text>),
grid.Column(header: "Ad Size", format:@<text><div data-id="@item.ID" data-propertyname="AdSize">@item.AdSize</div></text>),
grid.Column(header: "Path", format:@<text><div data-id="@item.ID" data-propertyname="Path">@item.Path</div></text>),
grid.Column(header: "PageNo", format:@<text><div data-id="@item.ID" data-propertyname="PageNo">@item.PageNo</div></text>),
grid.Column(header: "Book", format:@<text><div data-id="@item.ID" data-propertyname="Book">@item.Book</div></text>),
grid.Column(header: "Customer", format:@<text><div data-id="@item.ID" data-propertyname="Customer">@item.Customer</div></text>),
grid.Column(header: "Status", format:@<text><div class="editStatusSelect" data-id="@item.ID" data-propertyname="Status">@item.Status</div></text>),
grid.Column(header: "Repeat", format:@<text><div data-id="@item.ID" data-propertyname="Repeat">@item.Repeat</div></text>),
grid.Column(header: "AddGraphics", format:@<text><div data-id="@item.ID" data-propertyname="AddGraphics">@item.AddGraphics</div></text>),
grid.Column(header: "Deluxe", format:@<text><div data-id="@item.ID" data-propertyname="Deluxe">@item.Deluxe</div></text>),
grid.Column(header: "CustomSpecification", format:@<text><div data-id="@item.ID" data-propertyname="CustomSpecification">@item.CustomSpecification</div></text>),
grid.Column(header: "AdDescription", format:@<text><div data-id="@item.ID" data-propertyname="AdDescription">@item.AdDescription</div></text>),
grid.Column(header: "Discount", format:@<text><div data-id="@item.ID" data-propertyname="Discount">@item.Discount</div></text>),
grid.Column(header: "Total", format:@<text><div data-id="@item.ID" data-propertyname="Total">@item.Total</div></text>),
grid.Column(header: "AdStatus", format:@<text><div class="edit" data-id="@item.ID" data-propertyname="AdStatus">@item.AdStatus</div></text>),
grid.Column(header: "Action", format: @<button data-id="@item.ID" class="EditBtn btn btn-primary">EDIT</button>),
grid.Column(header: "", format: @<a class="btn btn-warning" href="@Url.Action("Delete","Ads",new {ID = item.ID })">DELETE</a>)
)
)




                </div>
            </div>
        </div>
    </div>
</div>
<style>
    .w100 {
        width: 100px;
    }

    .margin10 {
        margin-left: 10px;
    }
</style>

<script>

    $(document).ready(function () {
        var oldValue = '';
        $('.edit').editable('@Url.Action("NewAction","Ads")', {
            cssclass: 'jeditForm',
            tooltip: 'click to edit me...',
            width: 'none',
            height: 'none',
            onsubmit: function (settings, original) {
                oldValue = original.revert;
            },
            submitdata: function () {
                return {
                    id: $(this).data('id'),
                    PropertyName: $(this).data('propertyname')
                }
            },
            callback: function (value, settings) {
                var jsonData = $.parseJSON(value);
                if (jsonData.status) {
                    $(this).text(jsonData.value);
                }
                else {
                    $(this).text(oldValue);
                }
            }
        })

        $('.editStatusSelect').editable('@Url.Action("NewAction","Ads")', {
            cssclass: 'jeditForm',
            tooltip: 'click to edit me...',
            width: 'none',
            height: 'none',
            type: 'select',
            submit: 'Ok',
            data: {
                'Running': 'Running',
                'Email': 'Email',
                'Call': 'Call'
            },
            onsubmit: function (settings, original) {
                oldValue = original.revert;
            },
            submitdata: function () {
                return {
                    id: $(this).data('id'),
                    PropertyName: $(this).data('propertyname')
                }
            },
            callback: function (value, settings) {
                var jsonData = $.parseJSON(value);
                if (jsonData.status) {
                    $(this).text(jsonData.value);
                }
                else {
                    $(this).text(oldValue);
                }
            }
        })
        $('.editStatusSelect').click(function () {
            $('select', this).addClass('form-control pull-left w200');
            $('button', this).addClass('btn btn-sm btn-success margin10');
        });
    });


    $("#actionButton").click(function () {
        var Path = $("#Path").val();
        var withoutbasePath = $("#WithoutBaseURLPath").val();
        var Status = $("#AdStatus").val();

        $.ajax({
            url: '@Url.Action("Action", "Ads")',
            type: "post",
            data: $("#actionForm").serialize() + "&Path=" + Path + "&WithoutBaseURLPath=" + withoutbasePath

        })
            .done(function () {
                if (Status == "Placed") {
                    window.location.href = "@Url.Action("Index", "Ads")";

                } else {
                    window.location.href = "@Url.Action("Index", "MainScreen")";

                }
            })
            .fail(function () {
                console.log("error");
            });

    });



    function CheckDeluxeHidden() {
        var sizelmenet = document.getElementById("AdSize");
        if (sizelmenet.value == 'Full Page W’ Bleed' || sizelmenet.value == 'Full Page' || sizelmenet.value == 'Full Spread') {
            $("#deluxeDiv").show();
        }
        else {
            $("#deluxeDiv").hide();
        }
    }


    $(".EditBtn").click(function () {
        var ele = document.getElementById("actionForm");
        var path = document.getElementById("Path");
        var withoutbasePath = document.getElementById("WithoutBaseURLPath");
        $.ajax({
            url: '@Url.Action("ActionPartial", "Ads")',
            type: "get",
            data: { ID: $(this).attr("data-id") }
        })
            .done(function (oData) {
                $("#actionContainer").html(oData);
                CheckDeluxeHidden();
            });


        $.ajax({
            url: '@Url.Action("GetPathOfAd", "Ads")',
            type: "get",
            data: { ID: $(this).attr("data-id") }
        })
            .done(function (oData) {
                path.value = oData;
                window.scrollTo(ele.offsetLeft, ele.offsetTop);
            });



        $.ajax({
            url: '@Url.Action("GetWithoutBaseURLPathOfAd", "Ads")',
            type: "get",
            data: { ID: $(this).attr("data-id") }
        })
            .done(function (oData) {
                withoutbasePath.value = oData;
            });



     });
</script>















